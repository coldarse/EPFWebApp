{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {}\n/**\r\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\r\n */\n\n\nclass TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang) {\n    return of({});\n  }\n\n}\n\nTranslateFakeLoader.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateFakeLoader,\n  deps: null,\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nTranslateFakeLoader.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateFakeLoader\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateFakeLoader,\n  decorators: [{\n    type: Injectable\n  }]\n});\n\nclass MissingTranslationHandler {}\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\n\n\nclass FakeMissingTranslationHandler {\n  handle(params) {\n    return params.key;\n  }\n\n}\n\nFakeMissingTranslationHandler.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: FakeMissingTranslationHandler,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nFakeMissingTranslationHandler.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: FakeMissingTranslationHandler\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: FakeMissingTranslationHandler,\n  decorators: [{\n    type: Injectable\n  }]\n});\n/* tslint:disable */\n\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\n\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n\n  let t1 = typeof o1,\n      t2 = typeof o2,\n      length,\n      key,\n      keySet;\n\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n\n      keySet = Object.create(null);\n\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n\n        keySet[key] = true;\n      }\n\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/* tslint:enable */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction mergeDeep(target, source) {\n  let output = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n\n  return output;\n}\n\nclass TranslateParser {}\n\nclass TranslateDefaultParser extends TranslateParser {\n  constructor() {\n    super(...arguments);\n    this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n  }\n\n  interpolate(expr, params) {\n    let result;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr;\n    }\n\n    return result;\n  }\n\n  getValue(target, key) {\n    let keys = typeof key === 'string' ? key.split('.') : [key];\n    key = '';\n\n    do {\n      key += keys.shift();\n\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  interpolateFunction(fn, params) {\n    return fn(params);\n  }\n\n  interpolateString(expr, params) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring, b) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n\n}\n\nTranslateDefaultParser.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateDefaultParser,\n  deps: null,\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nTranslateDefaultParser.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateDefaultParser\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateDefaultParser,\n  decorators: [{\n    type: Injectable\n  }]\n});\n\nclass TranslateCompiler {}\n/**\r\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\r\n */\n\n\nclass TranslateFakeCompiler extends TranslateCompiler {\n  compile(value, lang) {\n    return value;\n  }\n\n  compileTranslations(translations, lang) {\n    return translations;\n  }\n\n}\n\nTranslateFakeCompiler.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateFakeCompiler,\n  deps: null,\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nTranslateFakeCompiler.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateFakeCompiler\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateFakeCompiler,\n  decorators: [{\n    type: Injectable\n  }]\n});\n\nclass TranslateStore {\n  constructor() {\n    /**\r\n     * The lang currently used\r\n     */\n    this.currentLang = this.defaultLang;\n    /**\r\n     * a list of translations per lang\r\n     */\n\n    this.translations = {};\n    /**\r\n     * an array of langs\r\n     */\n\n    this.langs = [];\n    /**\r\n     * An EventEmitter to listen to translation change events\r\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n    this.onTranslationChange = new EventEmitter();\n    /**\r\n     * An EventEmitter to listen to lang change events\r\n     * onLangChange.subscribe((params: LangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n    this.onLangChange = new EventEmitter();\n    /**\r\n     * An EventEmitter to listen to default lang change events\r\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n    this.onDefaultLangChange = new EventEmitter();\n  }\n\n}\n\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\n\nclass TranslateService {\n  /**\r\n   *\r\n   * @param store an instance of the store (that is supposed to be unique)\r\n   * @param currentLoader An instance of the loader currently used\r\n   * @param compiler An instance of the compiler currently used\r\n   * @param parser An instance of the parser currently used\r\n   * @param missingTranslationHandler A handler for missing translations.\r\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n   * @param isolate whether this service should use the store or not\r\n   * @param extend To make a child module extend (and use) translations from parent modules.\r\n   * @param defaultLanguage Set the default language using configuration\r\n   */\n  constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.extend = extend;\n    this.pending = false;\n    this._onTranslationChange = new EventEmitter();\n    this._onLangChange = new EventEmitter();\n    this._onDefaultLangChange = new EventEmitter();\n    this._langs = [];\n    this._translations = {};\n    this._translationRequests = {};\n    /** set the default language from configuration */\n\n    if (defaultLanguage) {\n      this.setDefaultLang(defaultLanguage);\n    }\n  }\n  /**\r\n   * An EventEmitter to listen to translation change events\r\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\n\n\n  get onTranslationChange() {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n  /**\r\n   * An EventEmitter to listen to lang change events\r\n   * onLangChange.subscribe((params: LangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\n\n\n  get onLangChange() {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n  /**\r\n   * An EventEmitter to listen to default lang change events\r\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\n\n\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n  /**\r\n   * The default lang to fallback when translations are missing on the current lang\r\n   */\n\n\n  get defaultLang() {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n  /**\r\n   * The lang currently used\r\n   */\n\n\n  get currentLang() {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n  /**\r\n   * an array of langs\r\n   */\n\n\n  get langs() {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n  /**\r\n   * a list of translations per lang\r\n   */\n\n\n  get translations() {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n  /**\r\n   * Sets the default language to use as a fallback\r\n   */\n\n\n  setDefaultLang(lang) {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (this.defaultLang == null) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1)).subscribe(res => {\n        this.changeDefaultLang(lang);\n      });\n    } else {\n      // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\r\n   * Gets the default language used\r\n   */\n\n\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n  /**\r\n   * Changes the lang currently used\r\n   */\n\n\n  use(lang) {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1)).subscribe(res => {\n        this.changeLang(lang);\n      });\n      return pending;\n    } else {\n      // we have this language, return an Observable\n      this.changeLang(lang);\n      return of(this.translations[lang]);\n    }\n  }\n  /**\r\n   * Retrieves the given translations\r\n   */\n\n\n  retrieveTranslations(lang) {\n    let pending; // if this language is unavailable or extend is true, ask for it\n\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n  /**\r\n   * Gets an object of translations for a given language with the current loader\r\n   * and passes it through the compiler\r\n   */\n\n\n  getTranslation(lang) {\n    this.pending = true;\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n    this.loadingTranslations = loadingTranslations.pipe(map(res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n    this.loadingTranslations.subscribe({\n      next: res => {\n        this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n        this.updateLangs();\n        this.pending = false;\n      },\n      error: err => {\n        this.pending = false;\n      }\n    });\n    return loadingTranslations;\n  }\n  /**\r\n   * Manually sets an object of translations for a given language\r\n   * after passing it through the compiler\r\n   */\n\n\n  setTranslation(lang, translations, shouldMerge = false) {\n    translations = this.compiler.compileTranslations(translations, lang);\n\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\r\n   * Returns an array of currently available langs\r\n   */\n\n\n  getLangs() {\n    return this.langs;\n  }\n  /**\r\n   * Add available langs\r\n   */\n\n\n  addLangs(langs) {\n    langs.forEach(lang => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n  /**\r\n   * Update the list of available langs\r\n   */\n\n\n  updateLangs() {\n    this.addLangs(Object.keys(this.translations));\n  }\n  /**\r\n   * Returns the parsed result of the translations\r\n   */\n\n\n  getParsedResult(translations, key, interpolateParams) {\n    let res;\n\n    if (key instanceof Array) {\n      let result = {},\n          observables = false;\n\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n\n        if (isObservable(result[k])) {\n          observables = true;\n        }\n      }\n\n      if (observables) {\n        const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\n        return forkJoin(sources).pipe(map(arr => {\n          let obj = {};\n          arr.forEach((value, index) => {\n            obj[key[index]] = value;\n          });\n          return obj;\n        }));\n      }\n\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params = {\n        key,\n        translateService: this\n      };\n\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n  /**\r\n   * Gets the translated value of a key (or an array of keys)\r\n   * @returns the translated key, or an object of translated keys\r\n   */\n\n\n  get(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    } // check if we are loading a new translation to use\n\n\n    if (this.pending) {\n      return this.loadingTranslations.pipe(concatMap(res => {\n        res = this.getParsedResult(res, key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }));\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    }\n  }\n  /**\r\n   * Returns a stream of translated values of a key (or an array of keys) which updates\r\n   * whenever the translation changes.\r\n   * @returns A stream of the translated key, or an object of translated keys\r\n   */\n\n\n  getStreamOnTranslationChange(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n\n      if (typeof res.subscribe === 'function') {\n        return res;\n      } else {\n        return of(res);\n      }\n    })));\n  }\n  /**\r\n   * Returns a stream of translated values of a key (or an array of keys) which updates\r\n   * whenever the language changes.\r\n   * @returns A stream of the translated key, or an object of translated keys\r\n   */\n\n\n  stream(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    })));\n  }\n  /**\r\n   * Returns a translation instantly from the internal state of loaded translation.\r\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n   */\n\n\n  instant(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n    if (isObservable(res)) {\n      if (key instanceof Array) {\n        let obj = {};\n        key.forEach((value, index) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n\n      return key;\n    } else {\n      return res;\n    }\n  }\n  /**\r\n   * Sets the translated value of a key, after compiling it\r\n   */\n\n\n  set(key, value, lang = this.currentLang) {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\r\n   * Changes the current lang\r\n   */\n\n\n  changeLang(lang) {\n    this.currentLang = lang;\n    this.onLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    }); // if there is no default lang, use the one that we just set\n\n    if (this.defaultLang == null) {\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\r\n   * Changes the default lang\r\n   */\n\n\n  changeDefaultLang(lang) {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\r\n   * Allows to reload the lang file from the file\r\n   */\n\n\n  reloadLang(lang) {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n  /**\r\n   * Deletes inner translation\r\n   */\n\n\n  resetLang(lang) {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n  /**\r\n   * Returns the language code name from the browser, e.g. \"de\"\r\n   */\n\n\n  getBrowserLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (typeof browserLang === 'undefined') {\n      return undefined;\n    }\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n  /**\r\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n   */\n\n\n  getBrowserCultureLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    return browserCultureLang;\n  }\n\n}\n\nTranslateService.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateService,\n  deps: [{\n    token: TranslateStore\n  }, {\n    token: TranslateLoader\n  }, {\n    token: TranslateCompiler\n  }, {\n    token: TranslateParser\n  }, {\n    token: MissingTranslationHandler\n  }, {\n    token: USE_DEFAULT_LANG\n  }, {\n    token: USE_STORE\n  }, {\n    token: USE_EXTEND\n  }, {\n    token: DEFAULT_LANGUAGE\n  }],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nTranslateService.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateService\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateService,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: function () {\n    return [{\n      type: TranslateStore\n    }, {\n      type: TranslateLoader\n    }, {\n      type: TranslateCompiler\n    }, {\n      type: TranslateParser\n    }, {\n      type: MissingTranslationHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_DEFAULT_LANG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_STORE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_EXTEND]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DEFAULT_LANGUAGE]\n      }]\n    }];\n  }\n});\n\nclass TranslateDirective {\n  constructor(translateService, element, _ref) {\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref; // subscribe to onTranslationChange event, in case the translations of the current lang change\n\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(event => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(event => {\n        this.checkNodes(true, event.translations);\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(event => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  set translate(key) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  set translateParams(params) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations) {\n    let nodes = this.element.nativeElement.childNodes; // if the element is empty\n\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n\n    for (let i = 0; i < nodes.length; ++i) {\n      let node = nodes[i];\n\n      if (node.nodeType === 3) {\n        // node type 3 is a text node\n        let key;\n\n        if (forceUpdate) {\n          node.lastKey = null;\n        }\n\n        if (isDefined(node.lookupKey)) {\n          key = node.lookupKey;\n        } else if (this.key) {\n          key = this.key;\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n\n          if (trimmedContent.length) {\n            node.lookupKey = trimmedContent; // we want to use the content as a key, not the translation value\n\n            if (content !== node.currentValue) {\n              key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n              node.originalContent = content || node.originalContent;\n            } else if (node.originalContent) {\n              // the content seems ok, but the lang has changed\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            } else if (content !== node.currentValue) {\n              // we want to use the content as a key, not the translation value\n              key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n              node.originalContent = content || node.originalContent;\n            }\n          }\n        }\n\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key, node, translations) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = res => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n\n        node.currentValue = isDefined(res) ? res : node.originalContent || key; // we replace in the original content to preserve spaces that we might have trimmed\n\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n\n        if (isObservable(res)) {\n          res.subscribe({\n            next: onTranslation\n          });\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node) {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node, content) {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n\n}\n\nTranslateDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateDirective,\n  deps: [{\n    token: TranslateService\n  }, {\n    token: i0.ElementRef\n  }, {\n    token: i0.ChangeDetectorRef\n  }],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nTranslateDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: TranslateDirective,\n  selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n  inputs: {\n    translate: \"translate\",\n    translateParams: \"translateParams\"\n  }\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[translate],[ngx-translate]'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  },\n  propDecorators: {\n    translate: [{\n      type: Input\n    }],\n    translateParams: [{\n      type: Input\n    }]\n  }\n});\n\nclass TranslatePipe {\n  constructor(translate, _ref) {\n    this.translate = translate;\n    this._ref = _ref;\n    this.value = '';\n    this.lastKey = null;\n    this.lastParams = [];\n  }\n\n  updateValue(key, interpolateParams, translations) {\n    let onTranslation = res => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n\n      this._ref.markForCheck();\n    };\n\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n\n      if (isObservable(res.subscribe)) {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query, ...args) {\n    if (!query || !query.length) {\n      return query;\n    } // if we ask another time for the same key, return the last value\n\n\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams = undefined;\n\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    } // store the query, in case it changes\n\n\n    this.lastKey = query; // store the params, in case they change\n\n    this.lastParams = args; // set the value\n\n    this.updateValue(query, interpolateParams); // if there is a subscription to onLangChange, clean it\n\n    this._dispose(); // subscribe to onTranslationChange event, in case the translations change\n\n\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe(event => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe(event => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n  /**\r\n   * Clean any existing subscription to change events\r\n   */\n\n\n  _dispose() {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy() {\n    this._dispose();\n  }\n\n}\n\nTranslatePipe.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslatePipe,\n  deps: [{\n    token: TranslateService\n  }, {\n    token: i0.ChangeDetectorRef\n  }],\n  target: i0.ɵɵFactoryTarget.Pipe\n});\nTranslatePipe.ɵpipe = i0.ɵɵdefinePipe({\n  name: \"translate\",\n  type: TranslatePipe,\n  pure: false\n});\nTranslatePipe.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslatePipe\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslatePipe,\n  decorators: [{\n    type: Injectable\n  }, {\n    type: Pipe,\n    args: [{\n      name: 'translate',\n      pure: false // required to update the value when the promise is resolved\n\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }\n});\n\nclass TranslateModule {\n  /**\r\n   * Use this method in your root module to provide the TranslateService\r\n   */\n  static forRoot(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, TranslateStore, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n  /**\r\n   * Use this method in your other (non root) modules to import the directive/pipe\r\n   */\n\n\n  static forChild(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n\n}\n\nTranslateModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nTranslateModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateModule,\n  declarations: [TranslatePipe, TranslateDirective],\n  exports: [TranslatePipe, TranslateDirective]\n});\nTranslateModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateModule\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.0.0\",\n  ngImport: i0,\n  type: TranslateModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [TranslatePipe, TranslateDirective],\n      exports: [TranslatePipe, TranslateDirective]\n    }]\n  }]\n});\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"sources":["D:/Work/EPF/EPFWebApp/node_modules/@ngx-translate/core/fesm2015/ngx-translate-core.mjs"],"names":["i0","Injectable","EventEmitter","InjectionToken","Inject","Directive","Input","Pipe","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","TranslateFakeLoader","getTranslation","lang","ɵfac","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","target","ɵɵFactoryTarget","ɵprov","ɵɵngDeclareInjectable","ɵɵngDeclareClassMetadata","decorators","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","key","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","source","output","assign","keys","forEach","TranslateParser","TranslateDefaultParser","constructor","arguments","templateMatcher","interpolate","expr","result","interpolateString","interpolateFunction","getValue","split","shift","undefined","fn","replace","substring","b","r","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","USE_STORE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","defaultLanguage","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","setDefaultLang","_defaultLang","_currentLang","retrieveTranslations","pipe","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","next","updateLangs","error","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","interpolateParams","observables","k","sources","arr","obj","index","translateService","get","Error","getStreamOnTranslationChange","event","stream","instant","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","token","ctorParameters","args","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","translate","translateParams","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","ElementRef","ChangeDetectorRef","ɵdir","selector","propDecorators","TranslatePipe","transform","query","validArgs","JSON","parse","e","SyntaxError","_dispose","ɵpipe","name","pure","TranslateModule","forRoot","config","ngModule","providers","loader","provide","useClass","useValue","forChild","ɵmod","ɵɵngDeclareNgModule","declarations","exports","ɵinj","ɵɵngDeclareInjector"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {\r\n}\r\n/**\r\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\r\n */\r\nclass TranslateFakeLoader extends TranslateLoader {\r\n    getTranslation(lang) {\r\n        return of({});\r\n    }\r\n}\r\nTranslateFakeLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateFakeLoader.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass MissingTranslationHandler {\r\n}\r\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\r\nclass FakeMissingTranslationHandler {\r\n    handle(params) {\r\n        return params.key;\r\n    }\r\n}\r\nFakeMissingTranslationHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nFakeMissingTranslationHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, decorators: [{\r\n            type: Injectable\r\n        }] });\n\n/* tslint:disable */\r\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\r\nfunction equals(o1, o2) {\r\n    if (o1 === o2)\r\n        return true;\r\n    if (o1 === null || o2 === null)\r\n        return false;\r\n    if (o1 !== o1 && o2 !== o2)\r\n        return true; // NaN === NaN\r\n    let t1 = typeof o1, t2 = typeof o2, length, key, keySet;\r\n    if (t1 == t2 && t1 == 'object') {\r\n        if (Array.isArray(o1)) {\r\n            if (!Array.isArray(o2))\r\n                return false;\r\n            if ((length = o1.length) == o2.length) {\r\n                for (key = 0; key < length; key++) {\r\n                    if (!equals(o1[key], o2[key]))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (Array.isArray(o2)) {\r\n                return false;\r\n            }\r\n            keySet = Object.create(null);\r\n            for (key in o1) {\r\n                if (!equals(o1[key], o2[key])) {\r\n                    return false;\r\n                }\r\n                keySet[key] = true;\r\n            }\r\n            for (key in o2) {\r\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/* tslint:enable */\r\nfunction isDefined(value) {\r\n    return typeof value !== 'undefined' && value !== null;\r\n}\r\nfunction isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\nfunction mergeDeep(target, source) {\r\n    let output = Object.assign({}, target);\r\n    if (isObject(target) && isObject(source)) {\r\n        Object.keys(source).forEach((key) => {\r\n            if (isObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                }\r\n                else {\r\n                    output[key] = mergeDeep(target[key], source[key]);\r\n                }\r\n            }\r\n            else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n    return output;\r\n}\n\nclass TranslateParser {\r\n}\r\nclass TranslateDefaultParser extends TranslateParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n    }\r\n    interpolate(expr, params) {\r\n        let result;\r\n        if (typeof expr === 'string') {\r\n            result = this.interpolateString(expr, params);\r\n        }\r\n        else if (typeof expr === 'function') {\r\n            result = this.interpolateFunction(expr, params);\r\n        }\r\n        else {\r\n            // this should not happen, but an unrelated TranslateService test depends on it\r\n            result = expr;\r\n        }\r\n        return result;\r\n    }\r\n    getValue(target, key) {\r\n        let keys = typeof key === 'string' ? key.split('.') : [key];\r\n        key = '';\r\n        do {\r\n            key += keys.shift();\r\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\r\n                target = target[key];\r\n                key = '';\r\n            }\r\n            else if (!keys.length) {\r\n                target = undefined;\r\n            }\r\n            else {\r\n                key += '.';\r\n            }\r\n        } while (keys.length);\r\n        return target;\r\n    }\r\n    interpolateFunction(fn, params) {\r\n        return fn(params);\r\n    }\r\n    interpolateString(expr, params) {\r\n        if (!params) {\r\n            return expr;\r\n        }\r\n        return expr.replace(this.templateMatcher, (substring, b) => {\r\n            let r = this.getValue(params, b);\r\n            return isDefined(r) ? r : substring;\r\n        });\r\n    }\r\n}\r\nTranslateDefaultParser.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateDefaultParser.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass TranslateCompiler {\r\n}\r\n/**\r\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\r\n */\r\nclass TranslateFakeCompiler extends TranslateCompiler {\r\n    compile(value, lang) {\r\n        return value;\r\n    }\r\n    compileTranslations(translations, lang) {\r\n        return translations;\r\n    }\r\n}\r\nTranslateFakeCompiler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateFakeCompiler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass TranslateStore {\r\n    constructor() {\r\n        /**\r\n         * The lang currently used\r\n         */\r\n        this.currentLang = this.defaultLang;\r\n        /**\r\n         * a list of translations per lang\r\n         */\r\n        this.translations = {};\r\n        /**\r\n         * an array of langs\r\n         */\r\n        this.langs = [];\r\n        /**\r\n         * An EventEmitter to listen to translation change events\r\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onTranslationChange = new EventEmitter();\r\n        /**\r\n         * An EventEmitter to listen to lang change events\r\n         * onLangChange.subscribe((params: LangChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onLangChange = new EventEmitter();\r\n        /**\r\n         * An EventEmitter to listen to default lang change events\r\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onDefaultLangChange = new EventEmitter();\r\n    }\r\n}\n\nconst USE_STORE = new InjectionToken('USE_STORE');\r\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\r\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\r\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\r\nclass TranslateService {\r\n    /**\r\n     *\r\n     * @param store an instance of the store (that is supposed to be unique)\r\n     * @param currentLoader An instance of the loader currently used\r\n     * @param compiler An instance of the compiler currently used\r\n     * @param parser An instance of the parser currently used\r\n     * @param missingTranslationHandler A handler for missing translations.\r\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n     * @param isolate whether this service should use the store or not\r\n     * @param extend To make a child module extend (and use) translations from parent modules.\r\n     * @param defaultLanguage Set the default language using configuration\r\n     */\r\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\r\n        this.store = store;\r\n        this.currentLoader = currentLoader;\r\n        this.compiler = compiler;\r\n        this.parser = parser;\r\n        this.missingTranslationHandler = missingTranslationHandler;\r\n        this.useDefaultLang = useDefaultLang;\r\n        this.isolate = isolate;\r\n        this.extend = extend;\r\n        this.pending = false;\r\n        this._onTranslationChange = new EventEmitter();\r\n        this._onLangChange = new EventEmitter();\r\n        this._onDefaultLangChange = new EventEmitter();\r\n        this._langs = [];\r\n        this._translations = {};\r\n        this._translationRequests = {};\r\n        /** set the default language from configuration */\r\n        if (defaultLanguage) {\r\n            this.setDefaultLang(defaultLanguage);\r\n        }\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to translation change events\r\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onTranslationChange() {\r\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to lang change events\r\n     * onLangChange.subscribe((params: LangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onLangChange() {\r\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to default lang change events\r\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onDefaultLangChange() {\r\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\r\n    }\r\n    /**\r\n     * The default lang to fallback when translations are missing on the current lang\r\n     */\r\n    get defaultLang() {\r\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\r\n    }\r\n    set defaultLang(defaultLang) {\r\n        if (this.isolate) {\r\n            this._defaultLang = defaultLang;\r\n        }\r\n        else {\r\n            this.store.defaultLang = defaultLang;\r\n        }\r\n    }\r\n    /**\r\n     * The lang currently used\r\n     */\r\n    get currentLang() {\r\n        return this.isolate ? this._currentLang : this.store.currentLang;\r\n    }\r\n    set currentLang(currentLang) {\r\n        if (this.isolate) {\r\n            this._currentLang = currentLang;\r\n        }\r\n        else {\r\n            this.store.currentLang = currentLang;\r\n        }\r\n    }\r\n    /**\r\n     * an array of langs\r\n     */\r\n    get langs() {\r\n        return this.isolate ? this._langs : this.store.langs;\r\n    }\r\n    set langs(langs) {\r\n        if (this.isolate) {\r\n            this._langs = langs;\r\n        }\r\n        else {\r\n            this.store.langs = langs;\r\n        }\r\n    }\r\n    /**\r\n     * a list of translations per lang\r\n     */\r\n    get translations() {\r\n        return this.isolate ? this._translations : this.store.translations;\r\n    }\r\n    set translations(translations) {\r\n        if (this.isolate) {\r\n            this._translations = translations;\r\n        }\r\n        else {\r\n            this.store.translations = translations;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the default language to use as a fallback\r\n     */\r\n    setDefaultLang(lang) {\r\n        if (lang === this.defaultLang) {\r\n            return;\r\n        }\r\n        let pending = this.retrieveTranslations(lang);\r\n        if (typeof pending !== \"undefined\") {\r\n            // on init set the defaultLang immediately\r\n            if (this.defaultLang == null) {\r\n                this.defaultLang = lang;\r\n            }\r\n            pending.pipe(take(1))\r\n                .subscribe((res) => {\r\n                this.changeDefaultLang(lang);\r\n            });\r\n        }\r\n        else { // we already have this language\r\n            this.changeDefaultLang(lang);\r\n        }\r\n    }\r\n    /**\r\n     * Gets the default language used\r\n     */\r\n    getDefaultLang() {\r\n        return this.defaultLang;\r\n    }\r\n    /**\r\n     * Changes the lang currently used\r\n     */\r\n    use(lang) {\r\n        // don't change the language if the language given is already selected\r\n        if (lang === this.currentLang) {\r\n            return of(this.translations[lang]);\r\n        }\r\n        let pending = this.retrieveTranslations(lang);\r\n        if (typeof pending !== \"undefined\") {\r\n            // on init set the currentLang immediately\r\n            if (!this.currentLang) {\r\n                this.currentLang = lang;\r\n            }\r\n            pending.pipe(take(1))\r\n                .subscribe((res) => {\r\n                this.changeLang(lang);\r\n            });\r\n            return pending;\r\n        }\r\n        else { // we have this language, return an Observable\r\n            this.changeLang(lang);\r\n            return of(this.translations[lang]);\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the given translations\r\n     */\r\n    retrieveTranslations(lang) {\r\n        let pending;\r\n        // if this language is unavailable or extend is true, ask for it\r\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\r\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\r\n            pending = this._translationRequests[lang];\r\n        }\r\n        return pending;\r\n    }\r\n    /**\r\n     * Gets an object of translations for a given language with the current loader\r\n     * and passes it through the compiler\r\n     */\r\n    getTranslation(lang) {\r\n        this.pending = true;\r\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\r\n        this.loadingTranslations = loadingTranslations.pipe(map((res) => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\r\n        this.loadingTranslations\r\n            .subscribe({\r\n            next: (res) => {\r\n                this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\r\n                this.updateLangs();\r\n                this.pending = false;\r\n            },\r\n            error: (err) => {\r\n                this.pending = false;\r\n            }\r\n        });\r\n        return loadingTranslations;\r\n    }\r\n    /**\r\n     * Manually sets an object of translations for a given language\r\n     * after passing it through the compiler\r\n     */\r\n    setTranslation(lang, translations, shouldMerge = false) {\r\n        translations = this.compiler.compileTranslations(translations, lang);\r\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\r\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\r\n        }\r\n        else {\r\n            this.translations[lang] = translations;\r\n        }\r\n        this.updateLangs();\r\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Returns an array of currently available langs\r\n     */\r\n    getLangs() {\r\n        return this.langs;\r\n    }\r\n    /**\r\n     * Add available langs\r\n     */\r\n    addLangs(langs) {\r\n        langs.forEach((lang) => {\r\n            if (this.langs.indexOf(lang) === -1) {\r\n                this.langs.push(lang);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Update the list of available langs\r\n     */\r\n    updateLangs() {\r\n        this.addLangs(Object.keys(this.translations));\r\n    }\r\n    /**\r\n     * Returns the parsed result of the translations\r\n     */\r\n    getParsedResult(translations, key, interpolateParams) {\r\n        let res;\r\n        if (key instanceof Array) {\r\n            let result = {}, observables = false;\r\n            for (let k of key) {\r\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\r\n                if (isObservable(result[k])) {\r\n                    observables = true;\r\n                }\r\n            }\r\n            if (observables) {\r\n                const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\r\n                return forkJoin(sources).pipe(map((arr) => {\r\n                    let obj = {};\r\n                    arr.forEach((value, index) => {\r\n                        obj[key[index]] = value;\r\n                    });\r\n                    return obj;\r\n                }));\r\n            }\r\n            return result;\r\n        }\r\n        if (translations) {\r\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\r\n        }\r\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\r\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\r\n        }\r\n        if (typeof res === \"undefined\") {\r\n            let params = { key, translateService: this };\r\n            if (typeof interpolateParams !== 'undefined') {\r\n                params.interpolateParams = interpolateParams;\r\n            }\r\n            res = this.missingTranslationHandler.handle(params);\r\n        }\r\n        return typeof res !== \"undefined\" ? res : key;\r\n    }\r\n    /**\r\n     * Gets the translated value of a key (or an array of keys)\r\n     * @returns the translated key, or an object of translated keys\r\n     */\r\n    get(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        // check if we are loading a new translation to use\r\n        if (this.pending) {\r\n            return this.loadingTranslations.pipe(concatMap((res) => {\r\n                res = this.getParsedResult(res, key, interpolateParams);\r\n                return isObservable(res) ? res : of(res);\r\n            }));\r\n        }\r\n        else {\r\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n            return isObservable(res) ? res : of(res);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the translation changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\r\n    getStreamOnTranslationChange(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap((event) => {\r\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n            if (typeof res.subscribe === 'function') {\r\n                return res;\r\n            }\r\n            else {\r\n                return of(res);\r\n            }\r\n        })));\r\n    }\r\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the language changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\r\n    stream(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap((event) => {\r\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n            return isObservable(res) ? res : of(res);\r\n        })));\r\n    }\r\n    /**\r\n     * Returns a translation instantly from the internal state of loaded translation.\r\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n     */\r\n    instant(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n        if (isObservable(res)) {\r\n            if (key instanceof Array) {\r\n                let obj = {};\r\n                key.forEach((value, index) => {\r\n                    obj[key[index]] = key[index];\r\n                });\r\n                return obj;\r\n            }\r\n            return key;\r\n        }\r\n        else {\r\n            return res;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the translated value of a key, after compiling it\r\n     */\r\n    set(key, value, lang = this.currentLang) {\r\n        this.translations[lang][key] = this.compiler.compile(value, lang);\r\n        this.updateLangs();\r\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Changes the current lang\r\n     */\r\n    changeLang(lang) {\r\n        this.currentLang = lang;\r\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\r\n        // if there is no default lang, use the one that we just set\r\n        if (this.defaultLang == null) {\r\n            this.changeDefaultLang(lang);\r\n        }\r\n    }\r\n    /**\r\n     * Changes the default lang\r\n     */\r\n    changeDefaultLang(lang) {\r\n        this.defaultLang = lang;\r\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Allows to reload the lang file from the file\r\n     */\r\n    reloadLang(lang) {\r\n        this.resetLang(lang);\r\n        return this.getTranslation(lang);\r\n    }\r\n    /**\r\n     * Deletes inner translation\r\n     */\r\n    resetLang(lang) {\r\n        this._translationRequests[lang] = undefined;\r\n        this.translations[lang] = undefined;\r\n    }\r\n    /**\r\n     * Returns the language code name from the browser, e.g. \"de\"\r\n     */\r\n    getBrowserLang() {\r\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n            return undefined;\r\n        }\r\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\r\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n        if (typeof browserLang === 'undefined') {\r\n            return undefined;\r\n        }\r\n        if (browserLang.indexOf('-') !== -1) {\r\n            browserLang = browserLang.split('-')[0];\r\n        }\r\n        if (browserLang.indexOf('_') !== -1) {\r\n            browserLang = browserLang.split('_')[0];\r\n        }\r\n        return browserLang;\r\n    }\r\n    /**\r\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n     */\r\n    getBrowserCultureLang() {\r\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n            return undefined;\r\n        }\r\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\r\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n        return browserCultureLang;\r\n    }\r\n}\r\nTranslateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService, deps: [{ token: TranslateStore }, { token: TranslateLoader }, { token: TranslateCompiler }, { token: TranslateParser }, { token: MissingTranslationHandler }, { token: USE_DEFAULT_LANG }, { token: USE_STORE }, { token: USE_EXTEND }, { token: DEFAULT_LANGUAGE }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () {\r\n        return [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [USE_DEFAULT_LANG]\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [USE_STORE]\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [USE_EXTEND]\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [DEFAULT_LANGUAGE]\r\n                    }] }];\r\n    } });\n\nclass TranslateDirective {\r\n    constructor(translateService, element, _ref) {\r\n        this.translateService = translateService;\r\n        this.element = element;\r\n        this._ref = _ref;\r\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\r\n        if (!this.onTranslationChangeSub) {\r\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {\r\n                if (event.lang === this.translateService.currentLang) {\r\n                    this.checkNodes(true, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onLangChange event, in case the language changes\r\n        if (!this.onLangChangeSub) {\r\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {\r\n                this.checkNodes(true, event.translations);\r\n            });\r\n        }\r\n        // subscribe to onDefaultLangChange event, in case the default language changes\r\n        if (!this.onDefaultLangChangeSub) {\r\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {\r\n                this.checkNodes(true);\r\n            });\r\n        }\r\n    }\r\n    set translate(key) {\r\n        if (key) {\r\n            this.key = key;\r\n            this.checkNodes();\r\n        }\r\n    }\r\n    set translateParams(params) {\r\n        if (!equals(this.currentParams, params)) {\r\n            this.currentParams = params;\r\n            this.checkNodes(true);\r\n        }\r\n    }\r\n    ngAfterViewChecked() {\r\n        this.checkNodes();\r\n    }\r\n    checkNodes(forceUpdate = false, translations) {\r\n        let nodes = this.element.nativeElement.childNodes;\r\n        // if the element is empty\r\n        if (!nodes.length) {\r\n            // we add the key as content\r\n            this.setContent(this.element.nativeElement, this.key);\r\n            nodes = this.element.nativeElement.childNodes;\r\n        }\r\n        for (let i = 0; i < nodes.length; ++i) {\r\n            let node = nodes[i];\r\n            if (node.nodeType === 3) { // node type 3 is a text node\r\n                let key;\r\n                if (forceUpdate) {\r\n                    node.lastKey = null;\r\n                }\r\n                if (isDefined(node.lookupKey)) {\r\n                    key = node.lookupKey;\r\n                }\r\n                else if (this.key) {\r\n                    key = this.key;\r\n                }\r\n                else {\r\n                    let content = this.getContent(node);\r\n                    let trimmedContent = content.trim();\r\n                    if (trimmedContent.length) {\r\n                        node.lookupKey = trimmedContent;\r\n                        // we want to use the content as a key, not the translation value\r\n                        if (content !== node.currentValue) {\r\n                            key = trimmedContent;\r\n                            // the content was changed from the user, we'll use it as a reference if needed\r\n                            node.originalContent = content || node.originalContent;\r\n                        }\r\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\r\n                            // the current content is the translation, not the key, use the last real content as key\r\n                            key = node.originalContent.trim();\r\n                        }\r\n                        else if (content !== node.currentValue) {\r\n                            // we want to use the content as a key, not the translation value\r\n                            key = trimmedContent;\r\n                            // the content was changed from the user, we'll use it as a reference if needed\r\n                            node.originalContent = content || node.originalContent;\r\n                        }\r\n                    }\r\n                }\r\n                this.updateValue(key, node, translations);\r\n            }\r\n        }\r\n    }\r\n    updateValue(key, node, translations) {\r\n        if (key) {\r\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\r\n                return;\r\n            }\r\n            this.lastParams = this.currentParams;\r\n            let onTranslation = (res) => {\r\n                if (res !== key) {\r\n                    node.lastKey = key;\r\n                }\r\n                if (!node.originalContent) {\r\n                    node.originalContent = this.getContent(node);\r\n                }\r\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\r\n                // we replace in the original content to preserve spaces that we might have trimmed\r\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\r\n                this._ref.markForCheck();\r\n            };\r\n            if (isDefined(translations)) {\r\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\r\n                if (isObservable(res)) {\r\n                    res.subscribe({ next: onTranslation });\r\n                }\r\n                else {\r\n                    onTranslation(res);\r\n                }\r\n            }\r\n            else {\r\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\r\n            }\r\n        }\r\n    }\r\n    getContent(node) {\r\n        return isDefined(node.textContent) ? node.textContent : node.data;\r\n    }\r\n    setContent(node, content) {\r\n        if (isDefined(node.textContent)) {\r\n            node.textContent = content;\r\n        }\r\n        else {\r\n            node.data = content;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.onLangChangeSub) {\r\n            this.onLangChangeSub.unsubscribe();\r\n        }\r\n        if (this.onDefaultLangChangeSub) {\r\n            this.onDefaultLangChangeSub.unsubscribe();\r\n        }\r\n        if (this.onTranslationChangeSub) {\r\n            this.onTranslationChangeSub.unsubscribe();\r\n        }\r\n    }\r\n}\r\nTranslateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDirective, deps: [{ token: TranslateService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nTranslateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: TranslateDirective, selector: \"[translate],[ngx-translate]\", inputs: { translate: \"translate\", translateParams: \"translateParams\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[translate],[ngx-translate]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { translate: [{\r\n                type: Input\r\n            }], translateParams: [{\r\n                type: Input\r\n            }] } });\n\nclass TranslatePipe {\r\n    constructor(translate, _ref) {\r\n        this.translate = translate;\r\n        this._ref = _ref;\r\n        this.value = '';\r\n        this.lastKey = null;\r\n        this.lastParams = [];\r\n    }\r\n    updateValue(key, interpolateParams, translations) {\r\n        let onTranslation = (res) => {\r\n            this.value = res !== undefined ? res : key;\r\n            this.lastKey = key;\r\n            this._ref.markForCheck();\r\n        };\r\n        if (translations) {\r\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\r\n            if (isObservable(res.subscribe)) {\r\n                res.subscribe(onTranslation);\r\n            }\r\n            else {\r\n                onTranslation(res);\r\n            }\r\n        }\r\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\r\n    }\r\n    transform(query, ...args) {\r\n        if (!query || !query.length) {\r\n            return query;\r\n        }\r\n        // if we ask another time for the same key, return the last value\r\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\r\n            return this.value;\r\n        }\r\n        let interpolateParams = undefined;\r\n        if (isDefined(args[0]) && args.length) {\r\n            if (typeof args[0] === 'string' && args[0].length) {\r\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\r\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\r\n                let validArgs = args[0]\r\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\r\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\r\n                try {\r\n                    interpolateParams = JSON.parse(validArgs);\r\n                }\r\n                catch (e) {\r\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\r\n                }\r\n            }\r\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\r\n                interpolateParams = args[0];\r\n            }\r\n        }\r\n        // store the query, in case it changes\r\n        this.lastKey = query;\r\n        // store the params, in case they change\r\n        this.lastParams = args;\r\n        // set the value\r\n        this.updateValue(query, interpolateParams);\r\n        // if there is a subscription to onLangChange, clean it\r\n        this._dispose();\r\n        // subscribe to onTranslationChange event, in case the translations change\r\n        if (!this.onTranslationChange) {\r\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event) => {\r\n                if (this.lastKey && event.lang === this.translate.currentLang) {\r\n                    this.lastKey = null;\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onLangChange event, in case the language changes\r\n        if (!this.onLangChange) {\r\n            this.onLangChange = this.translate.onLangChange.subscribe((event) => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onDefaultLangChange event, in case the default language changes\r\n        if (!this.onDefaultLangChange) {\r\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams);\r\n                }\r\n            });\r\n        }\r\n        return this.value;\r\n    }\r\n    /**\r\n     * Clean any existing subscription to change events\r\n     */\r\n    _dispose() {\r\n        if (typeof this.onTranslationChange !== 'undefined') {\r\n            this.onTranslationChange.unsubscribe();\r\n            this.onTranslationChange = undefined;\r\n        }\r\n        if (typeof this.onLangChange !== 'undefined') {\r\n            this.onLangChange.unsubscribe();\r\n            this.onLangChange = undefined;\r\n        }\r\n        if (typeof this.onDefaultLangChange !== 'undefined') {\r\n            this.onDefaultLangChange.unsubscribe();\r\n            this.onDefaultLangChange = undefined;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._dispose();\r\n    }\r\n}\r\nTranslatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, deps: [{ token: TranslateService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });\r\nTranslatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, name: \"translate\", pure: false });\r\nTranslatePipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, decorators: [{\r\n            type: Injectable\r\n        }, {\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'translate',\r\n                    pure: false // required to update the value when the promise is resolved\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ChangeDetectorRef }]; } });\n\nclass TranslateModule {\r\n    /**\r\n     * Use this method in your root module to provide the TranslateService\r\n     */\r\n    static forRoot(config = {}) {\r\n        return {\r\n            ngModule: TranslateModule,\r\n            providers: [\r\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\r\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\r\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\r\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\r\n                TranslateStore,\r\n                { provide: USE_STORE, useValue: config.isolate },\r\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\r\n                { provide: USE_EXTEND, useValue: config.extend },\r\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\r\n                TranslateService\r\n            ]\r\n        };\r\n    }\r\n    /**\r\n     * Use this method in your other (non root) modules to import the directive/pipe\r\n     */\r\n    static forChild(config = {}) {\r\n        return {\r\n            ngModule: TranslateModule,\r\n            providers: [\r\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\r\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\r\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\r\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\r\n                { provide: USE_STORE, useValue: config.isolate },\r\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\r\n                { provide: USE_EXTEND, useValue: config.extend },\r\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\r\n                TranslateService\r\n            ]\r\n        };\r\n    }\r\n}\r\nTranslateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nTranslateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, declarations: [TranslatePipe,\r\n        TranslateDirective], exports: [TranslatePipe,\r\n        TranslateDirective] });\r\nTranslateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        TranslatePipe,\r\n                        TranslateDirective\r\n                    ],\r\n                    exports: [\r\n                        TranslatePipe,\r\n                        TranslateDirective\r\n                    ]\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n"]},"metadata":{},"sourceType":"module"}