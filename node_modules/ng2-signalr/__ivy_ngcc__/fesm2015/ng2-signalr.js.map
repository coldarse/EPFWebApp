{"version":3,"file":"ng2-signalr.js","sources":["../../../projects/ng2-signalr/src/lib/services/eventing/broadcast.event.listener.ts","../../../projects/ng2-signalr/src/lib/services/testing/signalr.connection.mock.ts","../../../projects/ng2-signalr/src/lib/services/testing/signalr.connection.mock.manager.ts","../../../projects/ng2-signalr/src/lib/services/connection/connection.status.ts","../../../projects/ng2-signalr/src/lib/services/connection/connection.statuses.ts","../../../projects/ng2-signalr/src/lib/services/connection/signalr.connection.ts","../../../projects/ng2-signalr/src/lib/services/connection/connection.transport.ts","../../../projects/ng2-signalr/src/lib/services/connection/connection.transports.ts","../../../projects/ng2-signalr/src/lib/services/signalr.configuration.ts","../../../projects/ng2-signalr/src/lib/services/signalr.module.ts","../../../projects/ng2-signalr/src/lib/services/signalr.ts","../../../projects/ng2-signalr/src/lib/modules/signalr-module.ts","../../../projects/ng2-signalr/src/public-api.ts","../../../projects/ng2-signalr/src/ng2-signalr.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs';\r\n\r\nexport class BroadcastEventListener<T> extends Subject<T> {\r\n\r\n    constructor(public event: string) {\r\n        super();\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to create BroadcastEventListener. Argument \\'event\\' can not be empty');\r\n        }\r\n    }\r\n}\r\n","import { Observable, AsyncSubject, ReplaySubject, Subject } from 'rxjs';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from '../connection/connection.status';\r\nimport { ISignalRConnection } from '../connection/i.signalr.connection';\r\n\r\nexport interface IListenerCollection {\r\n    [name: string]: BroadcastEventListener<any>;\r\n}\r\n\r\nexport class SignalRConnectionMock implements ISignalRConnection {\r\n    constructor(\r\n        private _mockErrors$: Subject<any>,\r\n        private _mockStatus$: Subject<ConnectionStatus>,\r\n        private _listeners: IListenerCollection) {\r\n    }\r\n\r\n    get errors(): Observable<any> {\r\n        return this._mockErrors$;\r\n    }\r\n\r\n    get status(): Observable<ConnectionStatus> {\r\n        return this._mockStatus$.asObservable();\r\n    }\r\n\r\n    get id(): string {\r\n        return 'xxxxxxxx-xxxx-xxxx-xxxxxxxxx';\r\n    }\r\n\r\n    public stop(): void {\r\n        //\r\n    }\r\n\r\n    public start(): Promise<any> {\r\n        return Promise.resolve(null); // TODO: implement\r\n    }\r\n\r\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    public listen<T>(listener: BroadcastEventListener<T>): void {\r\n        this._listeners[listener.event] = listener;\r\n    }\r\n\r\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        const listener = new BroadcastEventListener<T>(event);\r\n        this.listen(listener);\r\n        return listener;\r\n    }\r\n\r\n    public listenForRaw(event: string): BroadcastEventListener<any[]> {\r\n        const listener = new BroadcastEventListener<any[]>(event);\r\n        this._listeners[listener.event] = listener;\r\n        return listener;\r\n    }\r\n\r\n    stopListening<T>(listener: BroadcastEventListener<T>): void {\r\n        delete this._listeners[listener.event];\r\n    }\r\n}\r\n","import { Subject, ReplaySubject } from 'rxjs';\r\nimport { SignalRConnectionMock, IListenerCollection } from './signalr.connection.mock';\r\nimport { ConnectionStatus } from '../connection/connection.status';\r\n\r\nexport class SignalRConnectionMockManager {\r\n\r\n    private _listeners: IListenerCollection;\r\n    private _status$: Subject<ConnectionStatus>;\r\n    private _errors$: Subject<any>;\r\n    private _object: SignalRConnectionMock;\r\n\r\n    constructor() {\r\n        this._errors$ = new Subject<any>();\r\n        this._status$ = new Subject<ConnectionStatus>();\r\n        this._listeners = {};\r\n        this._object = new SignalRConnectionMock(this._errors$, this._status$, this._listeners);\r\n    }\r\n\r\n    get mock(): SignalRConnectionMock {\r\n        return this._object;\r\n    }\r\n\r\n    get errors$(): Subject<any> {\r\n        return this._errors$;\r\n    }\r\n\r\n    get status$(): Subject<ConnectionStatus> {\r\n        return this._status$;\r\n    }\r\n\r\n    get listeners(): IListenerCollection {\r\n        return this._listeners;\r\n    }\r\n}\r\n","export class ConnectionStatus {\r\n\r\n    private static names: string[] = ['connecting', 'connected', 'reconnecting', '', 'disconnected'];\r\n\r\n    private _value: number;\r\n\r\n    get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n     get name(): string {\r\n        return ConnectionStatus.names[Number(this._value.toString())];\r\n    }\r\n\r\n    constructor(value: number) {\r\n        if (value == null || value < 0) {\r\n            throw new Error('Failed to create ConnectionStatus. Argument \\'name\\' can not be null or empty.');\r\n        }\r\n        this._value = value;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public equals(other: ConnectionStatus): boolean {\r\n        if (other == null) {\r\n            return false;\r\n        }\r\n        return this._value === other.value;\r\n    }\r\n}\r\n","import { ConnectionStatus } from './connection.status';\r\n\r\n// @dynamic\r\nexport class ConnectionStatuses {\r\n\r\n    private static statuses: ConnectionStatus[] =\r\n        [\r\n            new ConnectionStatus(0),\r\n            new ConnectionStatus(1),\r\n            new ConnectionStatus(2),\r\n            new ConnectionStatus(4)\r\n        ];\r\n\r\n    public static get connecting(): ConnectionStatus {\r\n        return ConnectionStatuses.statuses[0];\r\n    }\r\n\r\n    public static get connected(): ConnectionStatus {\r\n        return ConnectionStatuses.statuses[1];\r\n    }\r\n\r\n    public static get reconnecting(): ConnectionStatus {\r\n        return ConnectionStatuses.statuses[2];\r\n    }\r\n\r\n    public static get disconnected(): ConnectionStatus {\r\n        return ConnectionStatuses.statuses[3];\r\n    }\r\n}\r\n","import { ISignalRConnection } from './i.signalr.connection';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from './connection.status';\r\nimport { NgZone } from '@angular/core';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { ConnectionTransport } from './connection.transport';\r\n\r\nexport declare type CallbackFn = (...args: any[]) => void;\r\n\r\nexport class SignalRConnection implements ISignalRConnection {\r\n    private _status: Observable<ConnectionStatus>;\r\n    private _errors: Observable<any>;\r\n    private _jConnection: any;\r\n    private _jProxy: any;\r\n    private _zone: NgZone;\r\n    private _configuration: SignalRConfiguration;\r\n    private _listeners: { [eventName: string]: CallbackFn[] };\r\n\r\n    private _enabledLogging = true;\r\n\r\n    constructor(jConnection: any, jProxy: any, zone: NgZone, configuration: SignalRConfiguration) {\r\n        this._jProxy = jProxy;\r\n        this._jConnection = jConnection;\r\n        this._zone = zone;\r\n        this._errors = this.wireUpErrorsAsObservable();\r\n        this._status = this.wireUpStatusEventsAsObservable();\r\n        this._configuration = configuration;\r\n        this._enabledLogging = configuration.logging;\r\n        this._listeners = {};\r\n    }\r\n\r\n    public get errors(): Observable<any> {\r\n        return this._errors;\r\n    }\r\n\r\n    public get status(): Observable<ConnectionStatus> {\r\n        return this._status;\r\n    }\r\n\r\n    public get enabledLogging() {\r\n      return this._enabledLogging;\r\n    }\r\n\r\n    public set enabledLogging(val: boolean) {\r\n      this._enabledLogging = val;\r\n    }\r\n\r\n    public start(): Promise<ISignalRConnection> {\r\n\r\n        const jTransports = this.convertTransports(this._configuration.transport);\r\n\r\n        const $promise = new Promise<ISignalRConnection>((resolve, reject) => {\r\n            this._jConnection\r\n                .start({\r\n                    jsonp: this._configuration.jsonp,\r\n                    pingInterval: this._configuration.pingInterval,\r\n                    transport: jTransports,\r\n                    withCredentials: this._configuration.withCredentials,\r\n                })\r\n                .done(() => {\r\n                    this.log('Connection established, ID: ' + this._jConnection.id);\r\n                    this.log('Connection established, Transport: ' + this._jConnection.transport.name);\r\n                    resolve(this);\r\n                })\r\n                .fail((error: any) => {\r\n                    this.log('Could not connect');\r\n                    reject('Failed to connect. Error: ' + error.message); // ex: Error during negotiation request.\r\n                });\r\n        });\r\n        return $promise;\r\n    }\r\n\r\n    public stop(): void {\r\n        this._jConnection.stop();\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._jConnection.id;\r\n    }\r\n\r\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        if (method == null) {\r\n            throw new Error('SignalRConnection: Failed to invoke. Argument \\'method\\' can not be null');\r\n        }\r\n        this.log(`SignalRConnection. Start invoking \\'${method}\\'...`);\r\n\r\n        const $promise = new Promise<any>((resolve, reject) => {\r\n            this._jProxy.invoke(method, ...parameters)\r\n                .done((result: any) => {\r\n                    this.log(`\\'${method}\\' invoked succesfully. Resolving promise...`);\r\n                    resolve(result);\r\n                    this.log(`Promise resolved.`);\r\n                })\r\n                .fail((err: any) => {\r\n                    this.log(`Invoking \\'${method}\\' failed. Rejecting promise...`);\r\n                    reject(err);\r\n                    this.log(`Promise rejected.`);\r\n                });\r\n        });\r\n        return $promise;\r\n    }\r\n\r\n    public listen<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        const callback: CallbackFn = (...args: any[]) => {\r\n            this.run(() => {\r\n                let casted: T = null;\r\n                if (args.length > 0) {\r\n                    casted = args[0] as T;\r\n                }\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(casted);\r\n                this.log('listener next() called.');\r\n            }, this._configuration.executeEventsInZone);\r\n        };\r\n\r\n        this.setListener(callback, listener);\r\n    }\r\n\r\n    public stopListening<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        this.log(`SignalRConnection: Stopping listening to server event with name ${listener.event}`);\r\n        if (!this._listeners[listener.event]) {\r\n            this._listeners[listener.event] = [];\r\n        }\r\n\r\n        for (const callback of this._listeners[listener.event]) {\r\n            this._jProxy.off(listener.event, callback);\r\n        }\r\n\r\n        this._listeners[listener.event] = [];\r\n    }\r\n\r\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        const listener = new BroadcastEventListener<T>(event);\r\n\r\n        this.listen(listener);\r\n\r\n        return listener;\r\n    }\r\n\r\n    public listenForRaw(event: string): BroadcastEventListener<any[]> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        const listener = new BroadcastEventListener<any[]>(event);\r\n\r\n        const callback: CallbackFn = (...args: any[]) => {\r\n            this.run(() => {\r\n                let casted: any[] = [];\r\n                if (args.length > 0) {\r\n                    casted = args;\r\n                }\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(args);\r\n                this.log('listener next() called.');\r\n            }, this._configuration.executeEventsInZone);\r\n        };\r\n\r\n        this.setListener(callback, listener);\r\n        return listener;\r\n    }\r\n\r\n    private setListener<T>(callback: CallbackFn, listener: BroadcastEventListener<T>) {\r\n        this.log(`SignalRConnection: Starting to listen to server event with name ${listener.event}`);\r\n        this._jProxy.on(listener.event, callback);\r\n\r\n        if (this._listeners[listener.event] == null) {\r\n            this._listeners[listener.event] = [];\r\n        }\r\n\r\n        this._listeners[listener.event].push(callback);\r\n    }\r\n\r\n    private convertTransports(transports: ConnectionTransport | ConnectionTransport[]): any {\r\n        if (transports instanceof Array) {\r\n            return transports.map((t: ConnectionTransport) => t.name);\r\n        }\r\n        return transports.name;\r\n    }\r\n\r\n    private wireUpErrorsAsObservable(): Observable<any> {\r\n        const sError = new Subject<any>();\r\n\r\n        this._jConnection.error((error: any) => {\r\n            this.run(() => sError.next(error), this._configuration.executeErrorsInZone);\r\n        });\r\n        return sError;\r\n    }\r\n\r\n    private wireUpStatusEventsAsObservable(): Observable<ConnectionStatus> {\r\n        const sStatus = new Subject<ConnectionStatus>();\r\n        // aggregate all signalr connection status handlers into 1 observable.\r\n        // handler wire up, for signalr connection status callback.\r\n        this._jConnection.stateChanged((change: any) => {\r\n            this.run(() => sStatus.next(new ConnectionStatus(change.newState)),\r\n                this._configuration.executeStatusChangeInZone);\r\n        });\r\n        return sStatus.asObservable();\r\n    }\r\n\r\n    private onBroadcastEventReceived<T>(listener: BroadcastEventListener<T>, ...args: any[]) {\r\n        this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n\r\n        let casted: T = null;\r\n        if (args.length > 0) {\r\n            casted = args[0] as T;\r\n        }\r\n\r\n        this.run(() => {\r\n            listener.next(casted);\r\n        }, this._configuration.executeEventsInZone);\r\n\r\n        this.log('listener next() called.');\r\n    }\r\n\r\n    private log(...args: any[]) {\r\n        if (this.enabledLogging === false) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line: no-console\r\n        console.log(args.join(', '));\r\n    }\r\n\r\n    private run(func: () => void, inZone: boolean) {\r\n        if (inZone) {\r\n            this._zone.run(() => func());\r\n        } else {\r\n            this._zone.runOutsideAngular(() => func());\r\n        }\r\n    }\r\n}\r\n","export class ConnectionTransport {\r\n\r\n    private _name: string;\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    constructor(name: string) {\r\n        if (name == null || name === '') {\r\n            throw new Error('Failed to create ConnectionTransport. Argument \\'name\\' can not be null or empty.');\r\n        }\r\n        this._name = name;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this._name;\r\n    }\r\n\r\n    public equals(other: ConnectionTransport): boolean {\r\n        if (other == null) {\r\n            return false;\r\n        }\r\n\r\n        return this._name === other.name;\r\n    }\r\n}\r\n","import { ConnectionTransport } from './connection.transport';\r\n\r\n// @dynamic\r\nexport class ConnectionTransports {\r\n\r\n    private static transports: ConnectionTransport[] =\r\n        [\r\n            new ConnectionTransport('foreverFrame'),\r\n            new ConnectionTransport('longPolling'),\r\n            new ConnectionTransport('serverSentEvents'),\r\n            new ConnectionTransport('webSockets'),\r\n            new ConnectionTransport('auto'),\r\n        ];\r\n\r\n    public static get foreverFrame(): ConnectionTransport {\r\n        return ConnectionTransports.transports[0];\r\n    }\r\n\r\n    public static get longPolling(): ConnectionTransport {\r\n        return ConnectionTransports.transports[1];\r\n    }\r\n\r\n    public static get serverSentEvents(): ConnectionTransport {\r\n        return ConnectionTransports.transports[2];\r\n    }\r\n\r\n    public static get webSockets(): ConnectionTransport {\r\n        return ConnectionTransports.transports[3];\r\n    }\r\n\r\n    public static get auto(): ConnectionTransport {\r\n        return ConnectionTransports.transports[4];\r\n    }\r\n}\r\n","\r\nimport { ConnectionTransports } from './connection/connection.transports';\r\nimport { ConnectionTransport } from './connection/connection.transport';\r\nimport { IConnectionOptions } from './connection/connection.options';\r\n\r\nexport class SignalRConfiguration implements IConnectionOptions {\r\n\r\n    /** connection url to the SignalR service */\r\n    public url: string;\r\n\r\n    /** Allows you to specify query string parameters object when the client connects */\r\n    public qs?: any;\r\n\r\n    /** name of the SignalR service hub to connect to */\r\n    public hubName: string;\r\n\r\n    /** disable/enables client side logging. Defaults to false */\r\n    public logging: boolean;\r\n\r\n    /** Allows jsonp. This flag can be used to suppport CORS on older browsers */\r\n    public jsonp: boolean;\r\n\r\n     /** Allows withCredentials. This flag can be used to suppport CORS */\r\n    public withCredentials: boolean;\r\n\r\n    /** Allows pingInterval */\r\n    public pingInterval?: number;\r\n\r\n    /** Allows you to specify transport. You can specify a fallback order if you wan't to try specific transports in order. By default selects best avaliable transport. */\r\n    public transport: ConnectionTransport | ConnectionTransport[];\r\n\r\n    /** Allows you to run the event callback outside ngZone */\r\n    public executeEventsInZone?: boolean;\r\n\r\n    /** Allows you to run the errors callback outside ngZone */\r\n    public executeErrorsInZone?: boolean;\r\n\r\n    /** Allows you to run the status change in callback outside ngZone */\r\n    public executeStatusChangeInZone?: boolean;\r\n\r\n    constructor() {\r\n       this.hubName = null;\r\n       this.logging = false;\r\n       this.qs  = null;\r\n       this.url = null;\r\n       this.jsonp = false;\r\n       this.withCredentials = false;\r\n       this.transport = ConnectionTransports.auto;\r\n       this.executeEventsInZone = true;\r\n       this.executeErrorsInZone = false;\r\n       this.executeStatusChangeInZone = true;\r\n       this.pingInterval = 300000;\r\n    }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const SIGNALR_JCONNECTION_TOKEN = new InjectionToken<any>('SIGNALR_JCONNECTION_TOKEN');\r\n","import { ISignalRConnection } from './connection/i.signalr.connection';\r\nimport { SignalRConfiguration } from './signalr.configuration';\r\nimport { SignalRConnection } from './connection/signalr.connection';\r\nimport { NgZone, Injectable, Inject } from '@angular/core';\r\nimport { IConnectionOptions } from './connection/connection.options';\r\nimport { SIGNALR_JCONNECTION_TOKEN } from './signalr.module';\r\n\r\ndeclare var jQuery: any;\r\n\r\n@Injectable()\r\nexport class SignalR {\r\n    private _configuration: SignalRConfiguration;\r\n    private _zone: NgZone;\r\n    private _jHubConnectionFn: any;\r\n\r\n    public constructor(\r\n        configuration: SignalRConfiguration,\r\n        zone: NgZone,\r\n        @Inject(SIGNALR_JCONNECTION_TOKEN) jHubConnectionFn: any /* use type 'any'; Suggested workaround from angular repository: https://github.com/angular/angular/issues/12631 */\r\n    ) {\r\n        this._configuration = configuration;\r\n        this._zone = zone;\r\n        this._jHubConnectionFn = jHubConnectionFn;\r\n    }\r\n\r\n    public createConnection(options?: IConnectionOptions): SignalRConnection {\r\n        const configuration = this.merge(options ? options : {});\r\n\r\n        this.logConfiguration(configuration);\r\n\r\n        // create connection object\r\n        const jConnection = this._jHubConnectionFn(configuration.url);\r\n        jConnection.logging = configuration.logging;\r\n        jConnection.qs = configuration.qs;\r\n\r\n        // create a proxy\r\n        const jProxy = jConnection.createHubProxy(configuration.hubName);\r\n        // !!! important. We need to register at least one function otherwise server callbacks will not work.\r\n        jProxy.on('noOp', () => { /* */ });\r\n\r\n        const hubConnection = new SignalRConnection(jConnection, jProxy, this._zone, configuration);\r\n\r\n        return hubConnection;\r\n    }\r\n\r\n    public connect(options?: IConnectionOptions): Promise<ISignalRConnection> {\r\n        return this.createConnection(options).start();\r\n    }\r\n\r\n    private logConfiguration(configuration: SignalRConfiguration) {\r\n        try {\r\n            const serializedQs = JSON.stringify(configuration.qs);\r\n            const serializedTransport = JSON.stringify(configuration.transport);\r\n            if (configuration.logging) {\r\n                this.log(`Creating connecting with...`);\r\n                this.log(`configuration:[url: '${configuration.url}'] ...`);\r\n                this.log(`configuration:[hubName: '${configuration.hubName}'] ...`);\r\n                this.log(`configuration:[qs: '${serializedQs}'] ...`);\r\n                this.log(`configuration:[transport: '${serializedTransport}'] ...`);\r\n            }\r\n        } catch (err) { /* */ }\r\n    }\r\n\r\n    private log(str: string) {\r\n      // tslint:disable-next-line: no-console\r\n      console.log(str);\r\n    }\r\n\r\n    private merge(overrides: IConnectionOptions): SignalRConfiguration {\r\n        const merged: SignalRConfiguration = new SignalRConfiguration();\r\n        merged.hubName = overrides.hubName || this._configuration.hubName;\r\n        merged.url = overrides.url || this._configuration.url;\r\n        merged.qs = overrides.qs || this._configuration.qs;\r\n        merged.logging = this._configuration.logging;\r\n        merged.jsonp = overrides.jsonp || this._configuration.jsonp;\r\n        merged.withCredentials = overrides.withCredentials || this._configuration.withCredentials;\r\n        merged.transport = overrides.transport || this._configuration.transport;\r\n        merged.executeEventsInZone = overrides.executeEventsInZone || this._configuration.executeEventsInZone;\r\n        merged.executeErrorsInZone = overrides.executeErrorsInZone || this._configuration.executeErrorsInZone;\r\n        merged.executeStatusChangeInZone = overrides.executeStatusChangeInZone || this._configuration.executeStatusChangeInZone;\r\n        merged.pingInterval = overrides.pingInterval || this._configuration.pingInterval;\r\n        return merged;\r\n    }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders, NgZone, InjectionToken } from '@angular/core';\r\nimport { SignalR } from '../services/signalr';\r\nimport { SignalRConfiguration } from '../services/signalr.configuration';\r\n\r\nconst SIGNALR_CONFIGURATION = new InjectionToken<SignalRConfiguration>('SIGNALR_CONFIGURATION');\r\n\r\nexport function createSignalr(configuration: SignalRConfiguration, zone: NgZone) {\r\n\r\n    const jConnectionFn = getJConnectionFn();\r\n\r\n    return new SignalR(configuration, zone, jConnectionFn);\r\n}\r\n\r\nfunction getJConnectionFn(): any {\r\n    const jQuery = getJquery();\r\n    const hubConnectionFn = jQuery.hubConnection;\r\n    if (hubConnectionFn == null) {\r\n        throw new Error('Signalr failed to initialize. Script \\'jquery.signalR.js\\' is missing. Please make sure to include \\'jquery.signalR.js\\' script.');\r\n    }\r\n    return hubConnectionFn;\r\n}\r\n\r\nfunction getJquery(): any {\r\n    const jQuery = (window as any).jQuery;\r\n    if (jQuery == null) {\r\n        throw new Error('Signalr failed to initialize. Script \\'jquery.js\\' is missing. Please make sure to include jquery script.');\r\n    }\r\n    return jQuery;\r\n}\r\n\r\n@NgModule({\r\n    providers: [{\r\n        provide: SignalR,\r\n        useValue: SignalR\r\n    }]\r\n})\r\nexport class SignalRModule {\r\n    public static forRoot(getSignalRConfiguration: () => void): ModuleWithProviders<SignalRModule> {\r\n        return {\r\n            ngModule: SignalRModule,\r\n            providers: [\r\n                {\r\n                    provide: SIGNALR_CONFIGURATION,\r\n                    useFactory: getSignalRConfiguration\r\n                },\r\n                {\r\n                    deps: [SIGNALR_CONFIGURATION, NgZone],\r\n                    provide: SignalR,\r\n                    useFactory: (createSignalr)\r\n                }\r\n            ],\r\n        };\r\n    }\r\n    public static forChild(): ModuleWithProviders<SignalRModule> {\r\n        throw new Error('forChild method not implemented');\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ng2-signalr\r\n */\r\n\r\nexport { ISignalRConnection } from './lib/services/connection/i.signalr.connection';\r\nexport { SignalRConnectionMock } from './lib/services/testing/signalr.connection.mock';\r\nexport { SignalRConnectionMockManager } from './lib/services/testing/signalr.connection.mock.manager';\r\nexport { ConnectionStatus } from './lib/services/connection/connection.status';\r\nexport { ConnectionStatuses } from './lib/services/connection/connection.statuses';\r\nexport { BroadcastEventListener } from './lib/services/eventing/broadcast.event.listener';\r\nexport { SignalRConnection } from './lib/services/connection/signalr.connection';\r\nexport { IConnectionOptions } from './lib/services/connection/connection.options';\r\nexport { ConnectionTransport } from './lib/services/connection/connection.transport';\r\nexport { ConnectionTransports } from './lib/services/connection/connection.transports';\r\nexport { SignalR } from './lib/services/signalr';\r\nexport { SignalRConfiguration } from './lib/services/signalr.configuration';\r\nexport { SignalRModule } from './lib/modules/signalr-module';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {createSignalr as ɵa} from './lib/modules/signalr-module';\nexport {SIGNALR_JCONNECTION_TOKEN as ɵb} from './lib/services/signalr.module';"]}